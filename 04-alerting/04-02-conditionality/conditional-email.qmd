---
title: A slightly more complex email from Quarto
format: email
---

This is a slightly more complex report using Quarto. This time, modify the email below to add:

-   A `{.email-scheduled}` div containing a code chunk that, when evaluated as something "truthy", will send an email; when evaluated as something "falsy", will suppress the email

-   A `{.content-visible when-meta="give_praise"}` div that will include noted code block in the email when a metadata parameter named "give_praise" is "true"

## Setup

```{r}
#| label: setup

library(quarto)
library(glue)
library(lubridate)
library(praise)
```

## Helpers

1. We'll define a logical that we can use in the {.email-scheduled} block.

```{r}

send_email <- sample(c(TRUE, FALSE), 1)

```

2. Conditionally write metadata that will dictate whether the email will have additional information. 

The R package `{quarto}` includes a number of Quarto CLI wrappers and helpers, including a function `write_yaml_metadata_block` which will allow dynamic creation of metadata that is read at document render.

**Importantly, in the code block, you must include `#| output: asis` for correct rendering.**

Here's how it's done.

```{r}
#| output: asis

include_praise <- sample(c(TRUE, FALSE), 1)

if (include_praise) {
  quarto::write_yaml_metadata_block(
    give_praise = TRUE
  )
}

```


This will include a YAML metadata field of `give_praise: true` in our Quarto document if it is a Monday or Tuesday. 

## Your turn

:::: email

<!-- Add your `{.email-scheduled}` div here.  -->

::: {.email-scheduled}

```{r}
send_email
```
:::

::: subject
Surprise! It's a random "Hello" from Quarto!
:::

Today is a lucky day! 

You might also get a compliment if the conditions are right.

<!-- Surround the praise block below with  a `{.content-visible when-meta="give_praise"}` div so it is conditionally included  -->

::: {.content-visible when-meta="give_praise"}

```{r}
#| echo: false
#| results: asis

glue::glue("ðŸ¥   ", praise::praise(), "  ðŸ¥ ")

```

:::

::::


## ðŸ’¡ Tip!
Include logging info in your reports. This is very useful when looking at historical renders on Connect.

**Report run** `{r} lubridate::now()`

**Conditions set:** `{r} glue::glue("send_email: " , {send_email}, " | ", "include_praise: ", {include_praise})`

You can embed the rendered email in your report using an html iframe. This makes it easy to preview the result and also makes your historical reports more informative. 


**Email preview:**

<iframe src="email-preview/index.html" width=500 height =500></iframe>